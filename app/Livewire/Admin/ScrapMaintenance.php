<?php

namespace App\Livewire\Admin;

use App\Models\Scrap;
use Livewire\Component;
use App\Models\Financial;
use App\Helpers\SearchModel;
use Illuminate\Support\Facades\Auth;
use Livewire\WithPagination;

class ScrapMaintenance extends Component
{
  use WithPagination;

  public $orderBy = 'inventory_id', $sort = 'asc', $search;
  public $scrapId, $scrapDescription, $scrapQuantity, $scrapPrice, $scrapUom;
  public $editScrap = [];
  public $scraps = [];

  public function mount()
  {
    $this->scraps = $this->getScrapFinancials()->get();
  }

  public function getScrapFinancials()
  {
    return Financial::where('scrap', true)->orderBy($this->orderBy, $this->sort);
  }

  // Sort and filter
  public function selectedFilters($params)
  {
    if ($this->orderBy == $params) {
      $this->sort = $this->sort == 'asc' ? 'desc' : 'asc';
    } else {
      $this->orderBy = $params;
      $this->sort = 'desc';
    }
  }
  // Sort and filter

  // Auto generated id of Asset
  public function autoGeneratedId()
  {
    $latestScrap = Financial::where('inventory_id', 'LIKE', 'SCRAP%')
      ->orderBy('inventory_id', 'desc')
      ->first();

    if ($latestScrap) {
      $latestId = (int) str_replace('SCRAP', '', $latestScrap->inventory_id);
      $newAssetId = 'SCRAP' . str_pad($latestId + 1, 5, '0', STR_PAD_LEFT);
    } else {
      $newAssetId = 'SCRAP00001';
    }

    return $newAssetId;
  }
  // End generated id of Asset

  // Insert created scrap material
  public function createScrap()
  {
    $this->validate([
      'scrapId' => 'required|unique:financials,inventory_id',
      'scrapDescription' => 'required',
    ]);

    $data = [
      'inventory_id' => $this->scrapId,
      'description' => $this->scrapDescription,
      'available_quantity' => $this->scrapQuantity,
      'uom' => $this->scrapUom,
      'unit_cost' => $this->scrapPrice,
      'scrap' => true,
      'crtd_user' => Auth::user()->id,
    ];

    Financial::create($data);
    $this->reset(['scrapDescription', 'scrapQuantity', 'scrapPrice', 'scrapUom']);
    $this->scraps = $this->getScrapFinancials()->get();
    $this->dispatch('closeCreateModal');
    $this->dispatch('success-message', ['message' => 'Scrap material has been created successfully']);
  }
  // Insert created scrap material

  // Insert updated scrap material
  public function updateScrap()
  {
    $this->validate([
      'editScrap.inventory_id' => 'required|unique:financials,inventory_id,' . $this->editScrap['inventory_id'] . ',inventory_id',
      'editScrap.description' => 'required',
    ]);

    $updatedScrap = Financial::where('inventory_id', $this->editScrap['inventory_id'])->first();

    $this->editScrap['updtd_user'] = Auth::user()->id;

    $updatedScrap->update($this->editScrap);

    $this->scraps = $this->getScrapFinancials()->get();
    $this->dispatch('closeEditModal');
    $this->dispatch('success-message', ['message' => 'Scrap material has been updated successfully']);
  }
  // Insert updated scrap material

  // Search
  public function updatedSearch($search)
  {
    // $this->resetPage();
    $fields = [
      'inventory_id',
      'description',
      'uom',
    ];

    $model = $this->getScrapFinancials();
    if ($search) {
      $this->scraps = SearchModel::search($model, $fields, $search)->get();
    } else {
      $this->scraps = $model->get();
    }
  }
  // Search

  // Open and close modal
  public function createModalOpen()
  {
    $this->scrapId = $this->autoGeneratedId();
    $this->dispatch('openCreateModal');
  }

  public function createModalClose()
  {
    $this->dispatch('closeCreateModal');
  }
  public function openEditModal($id)
  {
    $this->editScrap = Financial::findOrFail($id)->only(['inventory_id', 'description', 'available_quantity', 'uom', 'unit_cost']);
    $this->dispatch('openEditModal');
  }

  public function closeEditModal()
  {
    $this->dispatch('closeEditModal');
  }
  // Open and close modal
  public function render()
  {
    return view('livewire.admin.scrap-maintenance');
  }
}
